# https://github.com/rust-lang/rust/blob/master/.github/workflows/ci.yml
# https://github.com/launchbadge/sqlx/blob/master/.github/workflows/sqlx.yml
# https://github.com/dh1tw/remoteAudio/blob/master/.github/workflows/build.yml
# https://github.com/ClementTsang/bottom/blob/master/.github/workflows/ci.yml
# https://github.com/actions-rs
# TODO: Set CRATE_NAME to match the project name
name: CI
env:
  CRATE_NAME: rpl
  BINARY_NAME: pl

on: [push, pull_request]

jobs:
  lints:
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    name: Lints
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-lints-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-lints-

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: fmt
          args: --all -- --check

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: clippy
          args: -- -D warnings

  check:
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    name: CI Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-check-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-check-

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: check

  build:
    needs: check
    name: Build
    runs-on: ${{ matrix.triple.os }}
    continue-on-error: true

    strategy:
      fail-fast: false
      matrix:
        triple:
          - {
              os: "ubuntu-latest",
              target: "x86_64-unknown-linux-gnu",
              cross: false,
            }
          - {
              os: "windows-latest",
              target: "x86_64-pc-windows-msvc",
              cross: false,
              suffix: ".exe",
            }
          - {
              os: "macOS-latest",
              target: "x86_64-apple-darwin",
              cross: false,
            }
          - {
              os: "ubuntu-latest",
              target: "aarch64-unknown-linux-gnu",
              ssl: "--features vendored-openssl --features rustls",
              cross: true,
            }
          - {
              os: "ubuntu-latest",
              target: "armv7-unknown-linux-gnueabihf",
              ssl: "--features vendored-openssl --features rustls",
              cross: true,
            }
          - {
              os: "ubuntu-latest",
              target: "arm-unknown-linux-gnueabihf",
              ssl: "--features vendored-openssl --features rustls",
              cross: true,
            }

    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.triple.target }}
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release ${{ matrix.triple.ssl }} --target=${{ matrix.triple.target }}
          use-cross: ${{ matrix.triple.cross }}

      - uses: svenstaro/upx-action@2.0.1
        with:
          file: target/${{ matrix.triple.target }}/release/${{ env.BINARY_NAME }}${{ matrix.triple.suffix }}
          args: --best
          strip: true

      - uses: actions/upload-artifact@master
        with:
          name: ${{ env.CRATE_NAME }}-${{ matrix.triple.target }}${{ matrix.triple.suffix }}
          path: target/${{ matrix.triple.target }}/release/${{ env.BINARY_NAME }}${{ matrix.triple.suffix }}

      - name: Get VERSION
        if: startsWith(github.ref, 'refs/tags/v')
        id: get_version
        shell: bash
        run: |
          echo "::set-output name=VERSION::${GITHUB_REF#refs/tags/}"

      - name: Renaming file before uploading
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        shell: bash
        run: |
          cp target/${{ matrix.triple.target }}/release/${{ env.BINARY_NAME }}${{ matrix.triple.suffix }} ${{ env.BINARY_NAME }}-$VERSION-${{ matrix.triple.target }}${{ matrix.triple.suffix }}

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          draft: true
          prerelease: false
          files: ${{ env.BINARY_NAME }}-${{ steps.get_version.outputs.VERSION }}-${{ matrix.triple.target }}${{ matrix.triple.suffix }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
